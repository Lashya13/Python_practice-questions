class Rover:
    def __init__(self,xcoordinate,ycoordinate,InitialDirection,seriesOfInstructions):
        self.xcoordinate = xcoordinate
        self.ycoordinate=  ycoordinate
        self.InitialDirection =InitialDirection
        self.seriesOfInstructions =seriesOfInstructions

    def rotateright(self,InitialDirection):
        if InitialDirection == "north":
            InitialDirection = "east"
        elif InitialDirection == "east":
            InitialDirection = "south"
        elif InitialDirection == "south":
            InitialDirection = "west"
        elif InitialDirection == "west":
            InitialDirection = "north" 
        return InitialDirection     

    def rotateleft(self,InitialDirection):
        if InitialDirection == "north":
            InitialDirection = "west"
        elif InitialDirection == "west":
            InitialDirection = "south"
        elif InitialDirection == "south":
            InitialDirection = "east"
        elif InitialDirection == "east":
            InitialDirection = "north" 
        return InitialDirection 

    def movecoordinates(self,InitialDirection):
        if InitialDirection =="north": 
            self.xcoordinate = self.xcoordinate
            self.ycoordinate +=1 

        elif InitialDirection =="east":  
            self.xcoordinate +=1
            self.ycoordinate = self.ycoordinate
        
        elif InitialDirection =="west":
            self.xcoordinate -=1
            self.ycoordinate = self.ycoordinate
       
        elif InitialDirection =="south":
            self.xcoordinate =self.xcoordinate
            self.ycoordinate -=1

        return self.xcoordinate, self.ycoordinate 



    def output(self):
        if self.xcoordinate <= row and  self.ycoordinate<= column:
            finalOutput = self.giveninstructions()    
            return finalOutput 
        else:
            print("enter valid x and y cooedinates.")          

class Plateue(Rover):
    def __init__(self,row,column):
        self.__row = row 
        self.__column = column

    def getrow(self):
        return self.__row    

    def getcolumn(self):
        return self.__column     

class Message(Rover): 
    def __init__(self,xcoordinate,ycoordinate,InitialDirection,seriesOfInstructions):
        super().__init__(xcoordinate,ycoordinate,InitialDirection,seriesOfInstructions)

    def giveninstructions(self):
        InitialDirection = self.InitialDirection
        movedPosition = self.xcoordinate,self.ycoordinate
        for instruction in self.seriesOfInstructions:
            if instruction =='L':
                InitialDirection = self.rotateleft(InitialDirection)
            elif instruction  =='R':
                InitialDirection = self.rotateright(InitialDirection) 
            elif instruction  =='M': 
                movedPosition = self.movecoordinates(InitialDirection)  
            else:
                print("Please enter correct instruction.") 
        return movedPosition ,InitialDirection    
        
    
     

grid =Plateue(5,5)
rover1 = Message(1,2,'north','LM')
rover2= Message(3,3,'east','MMRMMRMRRM')
row =grid.getrow()
column = grid.getcolumn()
print('output:', rover1.output())  
print('output:',rover2.output())               
